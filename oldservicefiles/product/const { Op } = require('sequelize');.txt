const { Op } = require('sequelize');
const db = require('@models');

exports.getInventoryLogs = async (merchantId, productId = null, filters = {}, pagination = { page: 1, limit: 20 }) => {
  const where = { merchant_id: merchantId };
  if (productId) where.menu_item_id = productId;
  if (filters.branch_id) where.branch_id = filters.branch_id;
  if (filters.adjustment_type) where.adjustment_type = filters.adjustment_type;
  if (filters.start_date && filters.end_date) {
    where.created_at = {
      [Op.between]: [ new Date(filters.start_date), new Date(filters.end_date) ]
    };
  } else if (filters.start_date) {
    where.created_at = { [Op.gte]: new Date(filters.start_date) };
  } else if (filters.end_date) {
    where.created_at = { [Op.lte]: new Date(filters.end_date) };
  }
  const offset = (pagination.page - 1) * pagination.limit;
  const logs = await db.InventoryAdjustmentLog.findAndCountAll({
    where,
    include: [
      { model: db.MenuInventory, as: 'product', attributes: ['id', 'name', 'sku'] },
      { model: db.User, as: 'performer', attributes: ['id', 'name', 'email'] }
    ],
    limit: pagination.limit,
    offset,
    order: [['created_at', 'DESC']]
  });
  return {
    data: logs.rows,
    total: logs.count,
    page: pagination.page,
    limit: pagination.limit,
    pages: Math.ceil(logs.count / pagination.limit)
  };
};

exports.getInventoryAlerts = async (merchantId, branchId = null, filters = {}, pagination = { page: 1, limit: 20 }) => {
  const where = { merchant_id: merchantId };
  if (branchId) where.branch_id = branchId;
  if (filters.resolved !== undefined) {
    where.resolved = filters.resolved === 'true';
  }
  if (filters.type) where.type = filters.type;
  const offset = (pagination.page - 1) * pagination.limit;
  const alerts = await db.InventoryAlert.findAndCountAll({
    where,
    include: [{
      model: db.MenuInventory,
      as: 'product',
      attributes: ['id', 'name', 'sku', 'quantity', 'minimum_stock_level', 'measurement_unit']
    }],
    limit: pagination.limit,
    offset,
    order: [['created_at', 'DESC']]
  });
  return {
    data: alerts.rows,
    total: alerts.count,
    page: pagination.page,
    limit: pagination.limit,
    pages: Math.ceil(alerts.count / pagination.limit)
  };
};

exports.resolveInventoryAlert = async (merchantId, alertId, userId) => {
  const alert = await db.InventoryAlert.findOne({
    where: { id: alertId, merchant_id: merchantId }
  });
  if (!alert) throw new Error('Alert not found');
  if (alert.resolved) throw new Error('Alert already resolved');
  await alert.update({
    resolved: true,
    resolved_by: userId,
    resolved_at: new Date()
  });
  return alert;
};
