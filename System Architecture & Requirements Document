Munch Mtxi - Comprehensive System Components and Feature List
Table of Contents
Models & Database Structure
User Models
Transactional Models
Authentication & Authorization
Geolocation & Country Management
Real-Time Features
Payment Integration Framework
Security Infrastructure
Notification System
Monitoring & Logging
Report Generation
Device Adaptation
Environment Setup
Documentation Needs
Detailed Feature List by User Role
Admins: Guardians of the System
Merchants: Masters of Commerce
Staff: Guardians of Operations
Drivers: Knights of the Road
Customers: Heroes of the Realm
Common: Features Used Across Multiple Roles
Enhanced Features: Table Service Ordering and Quick Links
Final Blessing
1. Models & Database Structure
1.1 User Models
1.1.1 User Model
Fields:
id
name
email
password
role
createdAt
updatedAt
Role-Specific Fields:
Extend with attributes based on user roles (e.g., Customer, Merchant, Staff, Driver).
1.1.2 Customer Model
Fields:
userId
phoneNumber
address
preferences
paymentMethods
createdAt
updatedAt
1.1.3 Merchant Model
Fields:
userId
businessName
businessType (e.g., Grocery, Restaurant)
address
phoneNumber
currency
timeZone
createdAt
updatedAt
1.1.4 Staff Model
Fields:
userId
merchantId
position
permissions
managerId (for hierarchy)
createdAt
updatedAt
1.1.5 Driver Model
Fields:
userId
vehicleInfo
licenseNumber
routes
availabilityStatus
currentLocation
createdAt
updatedAt
1.2 Transactional Models
1.2.1 Order Model
Fields:
id
customerId
merchantId
items
totalAmount
status
paymentStatus
createdAt
updatedAt
1.2.2 Booking Model
Fields:
id
customerId
merchantId
bookingType (e.g., Table, Taxi)
details
status
createdAt
updatedAt
1.2.3 Payment Model
Fields:
id
orderId
customerId
amount
paymentMethod
status
transactionId
createdAt
updatedAt
1.2.4 Notification Model
Fields:
id
userId
type
message
readStatus
createdAt
updatedAt
1.2.5 Menu/Inventory Model
Fields:
id
merchantId
itemName
description
price
stockLevel
category
createdAt
updatedAt
1.2.6 Report Model
Fields:
id
reportType
data
generatedBy
createdAt
updatedAt
1.2.7 Permissions Model
Fields:
id
role
permissions
createdAt
updatedAt
2. Authentication & Authorization
2.1 Role-Based Access Control (RBAC) System
Defined Roles: Admin, Merchant, Staff, Driver, Customer
Permissions: Assigned based on roles and hierarchical structures.
2.2 Admin-Only Registration for Non-Customer Roles
Restriction: Only Admins can register Merchant, Staff, and Driver roles.
2.3 JWT Token Management
Security: Use JSON Web Tokens for secure authentication.
Features:
Token issuance upon successful login.
Token refresh mechanisms.
2.4 Session Handling
Management: Securely manage user sessions.
Policies: Implement session expiration and renewal policies.
2.5 Permission Hierarchy for Merchant Staff
Structure: Define hierarchical permissions within Merchant roles (e.g., Manager > Staff).
2.6 Device-Based Authentication Tracking
Monitoring: Track and log devices used for authentication.
Features: Implement device recognition and binding.
2.7 Two-Factor Authentication (2FA) Support
Optional: Enhance security across all roles.
Methods: SMS, email, or authenticator apps.
2.8 Password Reset/Recovery System
Mechanisms: Secure password reset with email verification and token-based reset links.
3. Geolocation & Country Management
3.1 Google Maps Integration for Address Validation
Features:
Autocomplete address fields using Google Maps API.
Validate and standardize addresses based on geolocation data.
3.2 Country-Specific Configurations
Payment Methods: Enable country-specific payment options.
Currency Handling: Manage multi-currency support and conversions.
Phone Number Formats: Validate and format phone numbers based on country codes.
Business Rules: Implement country-specific business regulations and compliance checks.
3.3 Dynamic Location Detection
Automatic Detection: Detect user location via IP or GPS.
Adjustments: Adjust regional settings and content based on detected location.
3.4 Address Verification System
Accuracy: Ensure accuracy of user-provided addresses.
Corrections: Reject or prompt for correction of invalid addresses.
3.5 Route Optimization for Drivers
Algorithms: Determine the most efficient routes considering traffic conditions, distance, and delivery priorities.
4. Real-Time Features
4.1 WebSocket Implementation
Use Cases:
Order Tracking: Real-time updates on order status.
Driver Location Updates: Live tracking of driver positions.
Table Booking Status: Instant notifications on table reservation statuses.
Staff Task Assignments: Immediate assignment and updates of staff tasks.
Merchant Inventory Updates: Real-time stock level changes and alerts.
4.2 Socket.io Room Management
Organization: Group users into rooms based on roles or activities.
Broadcasting: Efficiently broadcast messages to relevant user groups.
4.3 Event Handling System
Management: Define and manage real-time events.
Communication: Ensure seamless communication between client and server.
4.4 Real-Time Notifications
Alerts: Instant alerts and updates to users based on actions or system events.
5. Payment Integration Framework
5.1 Mobile Money Integration Preparation
Providers: Airtel Money, TNM Mpamba, MTN Money, M-Pesa
APIs: Implement APIs for seamless mobile money transactions.
5.2 Card Payment System Preparation
Gateways: Integrate with payment gateways (e.g., Stripe, PayPal) for credit/debit card transactions.
Compliance: Ensure PCI-DSS compliance for handling card data.
5.3 Payment Verification System
Fraud Prevention: Validate payment transactions to prevent fraud.
Confirmation: Confirm successful payment before order processing.
5.4 Transaction Logging
Records: Maintain detailed logs of all financial transactions.
Auditing: Facilitate auditing and dispute resolution.
5.5 Refund Handling
Processes: Implement automated refund processes.
Manual Handling: Allow Admins and Merchants to initiate manual refunds when necessary.
5.6 Tips Management
Features: Enable customers to add tips to orders or rides.
Allocation: Allocate tips to appropriate Staff or Drivers based on policies.
6. Security Infrastructure
6.1 Rate Limiting System
Protection: Prevent API abuse by limiting the number of requests per user/IP.
Defense: Protect against DDoS attacks.
6.2 SQL Injection Prevention
Techniques: Use parameterized queries and ORM protections.
Validation: Validate and sanitize all user inputs.
6.3 XSS Protection
Measures: Encode outputs and sanitize user-generated content.
Policies: Implement Content Security Policies (CSP).
6.4 Input Sanitization
Cleaning: Remove malicious data from all inputs.
Validation: Use libraries or frameworks that enforce input validation.
6.5 Request Validation
Schemas: Ensure all API requests meet defined schemas.
Rejection: Reject malformed or unauthorized requests.
6.6 API Key Management
Security: Secure storage and rotation of API keys.
Access Control: Restrict access based on key permissions.
6.7 Error Logging System
Capture: Log all system errors and exceptions.
Monitoring: Monitor logs for unusual activities or patterns.
6.8 Security Headers Configuration
Headers: Implement HTTP security headers (e.g., HSTS, X-Frame-Options).
Protection: Guard against common web vulnerabilities.
6.9 CORS Setup
Policies: Define and restrict Cross-Origin Resource Sharing policies.
Access: Allow only trusted domains to interact with the API.
7. Notification System
7.1 WhatsApp Integration
Notifications: Send notifications and updates via WhatsApp.
API: Utilize WhatsApp Business API for automated messaging.
7.2 Email Notifications
Dispatch: Send system messages, order confirmations, and alerts via email.
Templates: Use templated emails for consistency.
7.3 SMS Gateway
Critical Alerts: Send SMS notifications for critical alerts and updates.
Reliability: Ensure reliable delivery through robust SMS providers.
7.4 Push Notifications
Real-Time Updates: Deliver real-time updates directly to users' mobile devices.
Types: Implement both in-app and device-level push notifications.
7.5 Notification Templates
Standardization: Standardize messages for various notification types.
Dynamic Content: Allow dynamic content insertion based on events.
7.6 Delivery Tracking
Monitoring: Track the delivery status of all notifications.
Retries: Retry failed deliveries automatically.
7.7 Retry Mechanism
Attempts: Implement retries for failed notification attempts.
Admin Alerts: Notify Admins of persistent delivery issues.
8. Monitoring & Logging
8.1 System Health Checks
Assessment: Regularly assess the status of all system components.
Alerts: Trigger alerts for any detected issues.
8.2 Performance Monitoring
Metrics: Track system performance metrics (e.g., response times, throughput).
Optimization: Optimize based on monitored data.
8.3 Error Tracking
Logging: Identify and log errors in real-time.
Resolution: Facilitate quick resolution of issues.
8.4 User Activity Logging
Recording: Record user actions and interactions within the platform.
Analysis: Analyze logs for behavior patterns and potential security threats.
8.5 Transaction Logging
Records: Maintain detailed records of all financial transactions.
Auditing: Support auditing and financial reporting.
8.6 Security Audit Logging
Events: Log security-related events and access attempts.
Compliance: Ensure compliance with security standards.
8.7 API Usage Monitoring
Tracking: Monitor API endpoints usage patterns.
Trend Analysis: Identify and address any abnormal usage trends.
8.8 Resource Utilization Tracking
Monitoring: Track server resources (CPU, memory, disk usage).
Scaling: Scale infrastructure based on usage data.
9. Report Generation
9.1 PDF Generation System
Downloads: Create downloadable PDF reports for various data sets.
Consistency: Ensure consistent formatting and accuracy.
9.2 Excel Export Functionality
Exports: Allow users to export data into Excel spreadsheets.
Analysis: Facilitate offline analysis and reporting.
9.3 Financial Reports
Statements: Generate detailed financial statements and summaries.
Planning: Support budgeting and financial planning.
9.4 Operational Analytics
Insights: Provide insights into day-to-day operations.
Optimization: Highlight areas for improvement and optimization.
9.5 Customer Insights
Behavior Analysis: Analyze customer behavior and preferences.
Strategy: Inform marketing and service strategies.
9.6 Performance Metrics
KPIs: Track KPIs across all user roles and system components.
Decision-Making: Enable data-driven decision-making.
9.7 Custom Report Builder
Customization: Allow Admins and Merchants to create tailored reports based on specific criteria.
Flexibility: Provide flexibility in data analysis.
10. Device Adaptation
10.1 Device Detection System
Identification: Identify user devices (mobile, tablet, desktop).
Optimization: Optimize content delivery based on device type.
10.2 Responsive API Responses
Tailoring: Tailor API responses to suit different device capabilities.
Efficiency: Ensure efficient data transmission for all devices.
10.3 Platform-Specific Optimizations
Enhancements: Enhance performance and usability on various platforms (iOS, Android, Web).
Features: Implement device-specific features where applicable.
10.4 Client Capability Detection
Detection: Detect and adapt to client-side capabilities and limitations.
Serving: Serve appropriate content and functionalities.
10.5 Mobile-Specific Endpoints
Optimization: Create optimized API endpoints for mobile app interactions.
Efficiency: Ensure lightweight and efficient data transfer.
10.6 Performance Optimization by Device
Loading Times: Optimize loading times and resource usage based on device performance.
Strategies: Implement caching and data compression strategies.
11. Environment Setup
11.1 Development Environment Configuration
Setup: Set up local development environments with necessary tools and dependencies.
Consistency: Ensure consistency across development teams.
11.2 Testing Environment Setup
Isolation: Create isolated environments for automated and manual testing.
CI Pipelines: Implement continuous integration (CI) pipelines for testing.
11.3 Production Environment Setup
Configuration: Configure secure and scalable production servers.
Reliability: Ensure high availability and fault tolerance.
11.4 CI/CD Pipeline Configuration
Automation: Automate build, test, and deployment processes.
Deployment: Implement continuous deployment (CD) for rapid feature releases.
11.5 Database Migrations
Management: Manage database schema changes seamlessly.
Tools: Use migration tools to version and apply updates.
11.6 Seed Data Preparation
Population: Populate databases with initial data for testing and development.
Consistency: Ensure data consistency across environments.
11.7 Environment-Specific Security Measures
Protocols: Implement security protocols tailored to each environment (dev, test, prod).
Policies: Restrict access and enforce security policies accordingly.
12. Documentation Needs
12.1 API Documentation (Swagger/OpenAPI)
Comprehensive Docs: Provide comprehensive API documentation with endpoints, parameters, and responses.
Interactive Testing: Enable interactive testing through Swagger UI.
12.2 System Architecture Documentation
Detailing: Detail the overall system architecture, including components and interactions.
Visuals: Illustrate data flows and dependencies.
12.3 Database Schema Documentation
Documentation: Document all database models, relationships, and constraints.
ER Diagrams: Provide ER diagrams for visual reference.
12.4 Integration Guides
Instructions: Offer step-by-step instructions for integrating third-party services and APIs.
Examples: Include examples and best practices.
12.5 Deployment Guides
Procedures: Outline procedures for deploying the application across environments.
Strategies: Include rollback and recovery strategies.
12.6 Security Documentation
Protocols: Detail security protocols, measures, and compliance standards.
Guidelines: Provide guidelines for handling sensitive data and incidents.
12.7 Testing Documentation
Strategies: Describe testing strategies, including unit, integration, and end-to-end tests.
Examples: Include test case examples and coverage reports.
13. Detailed Feature List by User Role
13.1 Admins: Guardians of the System
13.1.1 Location Management (adminLocationController.js)
Regional Configuration:
Manage Location Data: Add, update, or override country codes, address templates, and postal rules to ensure regional compliance.
Override Regional Settings: Modify settings per region to maintain accurate address formats and adherence to local regulations.
Currency & Time Zone Settings:
Maintain Local Currencies: Manage and update currency codes such as MWK, ZMW, MZN, TZS.
Adjust Time Zones: Change default currencies or time zones based on evolving business needs.
Address Format Standardization:
Define Address Formats: Set standard address structures, including the inclusion or exclusion of postal codes, provinces, etc.
Enforce Standardization: Ensure Merchant branches input addresses correctly for accurate deliveries.
Phone Number Prefix Management:
Validate Phone Prefixes: Ensure phone numbers start with valid prefixes (+265, +260, +258, +255).
Bulk Correct Phone Records: Perform bulk updates to maintain data integrity.
Country-Specific Validation Rules:
Set Validation Rules: Implement or remove rules such as verifying local business licenses.
Ensure Compliance: Guarantee that each Merchant adheres to regional legal requirements.
13.1.2 System Monitoring (adminMonitorController.js)
Real-Time Performance Metrics:
Track System Metrics: Monitor requests, server load, and error logs.
Identify Issues: Detect unusual traffic patterns or process slowdowns.
Alert Configuration & Management:
Define Thresholds: Set performance thresholds for response time, CPU usage, etc.
Receive Notifications: Get alerts for events like mass product deletions or high error rates.
System Health Monitoring:
Monitor Resources: Observe CPU, memory, and database performance.
Intervene When Necessary: Act if large Merchant processes threaten system stability.
Resource Utilization Tracking:
Historical Usage Data: Analyze past resource usage to plan system expansions or implement rate limits.
Apply Traffic Caps: Limit Merchant traffic during unexpected surges.
Incident Response Management:
Centralize Ticketing: Manage technical incident tickets.
Coordinate Resolutions: Work with Merchants and Staff to resolve system-wide issues.
API Performance Monitoring:
Detect Slow Endpoints: Identify and address slow or failing API endpoints.
Control Merchant APIs: Temporarily disable problematic Merchant controllers if necessary.
Error Rate Tracking:
Log Errors: Keep records of frequent or critical errors.
Take Action: Intervene when Merchant APIs fail repeatedly.
Response Time Analytics:
Compare by Region/Role: Analyze performance differences across regions or user roles.
Allocate Resources: Provide more resources to high-demand Merchant branches.
13.1.3 Role Management (adminRoleController.js)
User Role Assignment & Modification:
Manage Roles: Grant or remove roles such as Merchant, Driver, Staff, Admin.
Force Role Changes: Modify roles if a Merchant misuses the hierarchy.
Permission Management:
Define Permissions: Set route-based permissions for each role.
Override Permissions: Override Merchant-level permissions for compliance reasons.
Role Hierarchy Maintenance:
Maintain Multi-Layer Roles: Ensure proper hierarchy (e.g., Merchant Admin > Merchant Staff).
Promote/Demote Roles: Adjust roles directly to maintain the correct chain-of-command.
Access Control Management:
Restrict Sensitive Endpoints: Limit access to high-tier roles.
Grant Emergency Access: Provide temporary advanced privileges when necessary.
Role-Based Security Enforcement:
Central Security Checks: Implement security across all controllers.
Log Unauthorized Attempts: Notify Admins of unauthorized access attempts for swift action.
13.1.4 User Management (adminUserController.js)
Global User Base Management:
Manage Users: List, filter, and export all users including Customers, Merchants, Drivers, and Staff.
Monitor Expansions: View Merchant expansions or staff levels at a glance.
Profile Verification & Updates:
Validate/Edit User Details: Correct discrepancies like phone mismatches.
Override Merchant Data: Make urgent corrections when needed.
Account Status Control:
Manage Accounts: Suspend, deactivate, or delete accounts temporarily or permanently.
Enforce Policy Violations: Freeze Merchant or Staff accounts as necessary.
User Activity Monitoring:
Track Activities: Monitor suspicious logins, role changes, or staff expansions.
Intervene Appropriately: Act if Merchants create unauthorized staff roles.
Compliance Enforcement:
Check Licensing/KYC: Ensure Merchants have valid local licenses and comply with KYC requirements.
Maintain Legal Standards: Keep Merchants within legal guidelines.
User Data Management:
Secure Storage: Ensure user data is stored securely.
Handle Official Requests: Manage data anonymization or production as mandated by law.
13.1.5 Order Management (adminOrderController.js)
Global Order Tracking:
View All Orders: Access orders across regions and Merchant branches.
Reroute Orders: Redirect orders if a Merchant is offline or unresponsive.
Order Dispute Resolution:
Investigate Issues: Handle missing items, late deliveries, billing problems.
Issue Refunds/Credits: Provide refunds or credits during emergencies.
Delivery Status Monitoring:
Monitor Drivers: Track real-time driver updates like “Out for Delivery” or “Completed”.
Reassign Drivers: Allocate drivers if a Merchant or Driver fails to act.
Order Analytics & Reporting:
Generate Summaries: Create reports by country, Merchant type (e.g., Grocery, Restaurant).
Identify Underperforming Branches: Suggest improvements based on analytics.
Cancellation Management:
Oversee Cancellations: Manage both user and Merchant-initiated cancellations.
Finalize Cancellations: Act if Merchants cannot respond to cancellation requests.
Refund Processing:
Validate Requests: Ensure refund requests are legitimate.
Update Financial Logs: Override Merchant rejections when justified.
13.1.6 Transportation Management (adminTransportController.js)
Taxi Dispatch & Booking Oversight:
Real-Time Ride Tracking: Monitor ongoing rides, including driver location and passenger details.
Assign Drivers Manually: Allocate drivers if the system fails to auto-dispatch.
Driver Location Monitoring:
Active Driver Map: View active drivers with availability statuses.
Re-route Drivers: Adjust driver assignments to handle coverage gaps or emergencies.
Route Optimization Oversight:
Suggest Shorter Routes: Optimize routes to reduce congestion or costs.
Enforce Route Changes: Implement necessary route adjustments.
Fare Management:
Configure Fares: Set base fares and surge pricing parameters.
Override Fares: Adjust final fares in case of disputes.
Transportation Analytics:
Track Metrics: Monitor ride volumes, acceptance rates, and revenue.
Plan Expansions: Identify trends for regional expansions based on demand.
Emergency Response Coordination:
Trigger Alerts: Activate alerts for suspicious or unsafe trips.
Contact Authorities: Engage local authorities or forcibly end unsafe rides.
13.1.7 Reservation Management (adminReservationController.js)
Table Booking Oversight:
Monitor Reservations: Track all active or upcoming restaurant reservations.
Intervene in Double-Bookings: Resolve conflicts or unresponsiveness from Merchants.
Capacity Management:
Track Seat Availability: Ensure real-time accuracy of table capacities.
Adjust Capacity: Modify reported seat limits if Merchants incorrectly report them.
Reservation Conflict Resolution:
Mediate Scheduling Disputes: Resolve conflicts in reservation schedules.
Override Cancellations: Maintain fairness by managing cancellations.
Special Event Management:
Oversee Group Bookings: Manage large group reservations or special requests.
Coordinate Resources: Work with Merchant staff to allocate extra resources as needed.
Restaurant Analytics:
Spot Trends: Analyze reservation trends, busy hours, and cancellation rates.
Recommend Improvements: Suggest expansions or promotional strategies based on data.
Booking Pattern Analysis:
Identify Habits: Recognize cyclical booking patterns (e.g., Friday nights, holidays).
Suggest Strategies: Advise on targeted staffing or marketing initiatives.
13.1.8 Staff Operations (adminStaffController.js)
Staff Performance Monitoring:
Track Metrics: Monitor staff speed, feedback, and tip metrics.
Reassign or Train Staff: Reallocate underperforming staff or enforce additional training.
Merchant Staff Dispute Resolution:
Mediate Conflicts: Resolve disputes or issues beyond Merchant authority.
Ensure Fairness: Admin rulings are final to maintain system fairness.
Staff Allocation Oversight:
Manage Staffing Levels: Move staff across branches if short-handed.
Force Assignments: Add or remove staff if Merchants are absent.
Training Compliance Tracking:
Monitor Training Requirements: Ensure staff complete necessary training (e.g., food safety, regulations).
Lock Accounts: Restrict staff access until training is completed.
Staff Analytics:
Summarize Data: Track staff turnover, performance, and attendance.
Identify Talent: Highlight top-performing or problematic staff members.
Performance Metrics Management:
Document KPIs: Maintain records of staff KPIs and evaluate improvements.
Manage Promotions: Oversee staff promotions or demotions if Merchants are negligent.
13.1.9 Analytics & Reporting (adminAnalyticsController.js)
Cross-Platform Analytics:
Integrate Data Sources: Combine data from orders, reservations, taxi rides, table service, etc.
Holistic View: Provide Admins with a comprehensive understanding of platform operations.
Business Intelligence Reporting:
Track KPIs: Monitor key performance indicators like ROI, revenue growth, and operational costs.
Advise on Decisions: Recommend expansions or closures based on performance data.
Performance Trend Analysis:
Historical vs. Current Data: Compare past and present performance metrics.
Predictive Insights: Warn or advise on potential business trends.
Revenue Tracking:
Consolidate Earnings: Aggregate revenues from deliveries, rides, table bookings, and in-dining orders.
Correct Revenue Issues: Address misallocated revenues as needed.
User Behavior Analytics:
Track Interactions: Monitor how different roles interact with the platform.
Identify Friction Points: Locate and address issues in user flows or usage patterns.
Market Analysis Tools:
Evaluate Demand: Assess region-specific demand and competitor data.
Strategize Expansions: Target new product lines or regional expansions based on analysis.
13.1.10 Content Management (adminContentController.js)
Platform-Wide Content Moderation:
Approve/Reject Content: Manage user and Merchant-generated content to prevent prohibited or misleading information.
Announcement Management:
Post Bulletins: Share urgent system-wide updates or important information.
Highlight Policies: Inform users about new Merchant policies or Staff guidelines.
Terms & Policies Updates:
Refresh Legal Content: Update terms of service and privacy policies.
User Acknowledgment: Require users to re-acknowledge major policy changes.
Marketing Content Oversight:
Review Promotions: Ensure fairness and compliance of promotions and discount banners.
Resolve Listing Disputes: Manage disputes related to “featured” listings or advertisements.
Localization Management:
Handle Disclaimers: Manage region-based disclaimers without altering language strings.
Adjust Currency/Region Settings: Update disclaimers based on currency or region changes.
Media Asset Management:
Store Assets: Manage official logos, videos, and brand materials.
Remove Outdated Content: Delete outdated or unlicensed media assets.
13.2 Merchants: Masters of Commerce
13.2.1 Merchant Authentication (merchantAuthController.js)
Register Merchant:
Onboarding Process: Register new Merchants by providing business details, selecting business type (e.g., Grocery, Restaurant), and assigning to specific regions or categories.
Login Merchant:
Authenticate Credentials: Verify Merchant login details and issue JWT tokens for secure sessions.
Verify Merchant:
Background Checks: Perform necessary verifications such as business license validation and KYC processes.
Logout Merchant:
End Session: Safely terminate the Merchant’s active session.
13.2.2 Merchant Profile Management (merchantProfileController.js)
Update Profile:
Modify Business Info: Update business name, contact details, address, and other pertinent information.
Get Profile:
Retrieve Details: Access the Merchant’s profile information for review and management.
Change Password:
Secure Password Updates: Enable Merchants to update their account passwords.
Toggle Merchant 2FA:
Enhance Security: Allow Merchants to enable or disable two-factor authentication for added security.
13.2.3 Product & Service Management (merchantProductController.js)
Add Product/Service:
List Offerings: Add new products or services to the Merchant’s catalog, including descriptions, prices, and images.
Update Product/Service:
Edit Details: Modify existing product or service information as needed.
Delete Product/Service:
Remove Offerings: Delete products or services that are no longer available.
Manage Inventory:
Track Stock Levels: Monitor and update inventory quantities to ensure availability.
13.2.4 Order Management (merchantOrderController.js)
View Orders:
Access Order Details: View incoming orders with comprehensive details including customer information, items ordered, and payment status.
Update Order Status:
Manage Workflow: Change order statuses such as Preparing, Ready for Pickup, Out for Delivery, Completed.
Handle Cancellations:
Process Refunds: Manage order cancellations initiated by customers or Merchants, including refund processing.
Order Analytics:
Analyze Sales Data: Review sales trends, popular products, and revenue metrics to make informed business decisions.
13.2.5 Reservation Management (merchantReservationController.js)
Manage Bookings:
Approve/Deny Reservations: Handle table booking requests, approving or denying based on availability.
Adjust Capacity:
Update Seat Limits: Modify the number of available seats or tables in real-time to reflect current capacity.
Special Event Coordination:
Organize Events: Manage reservations for special events, large groups, or promotional activities.
13.2.6 Staff Management (merchantStaffController.js)
Add Staff Members:
Recruit Staff: Add new Staff members to the Merchant’s team, assigning roles and permissions.
Update Staff Roles:
Modify Permissions: Change Staff roles and access levels as needed.
Remove Staff Members:
Manage Team: Remove Staff members who are no longer part of the team.
Monitor Staff Performance:
Track KPIs: Evaluate Staff performance based on metrics such as task completion times, customer feedback, and sales.
13.2.7 Marketing & Promotions (merchantMarketingController.js)
Create Promotions:
Design Offers: Develop promotional campaigns, discounts, and special offers to attract customers.
Manage Advertising:
Feature Listings: Promote products or services through featured listings or banner ads within the platform.
Analyze Campaign Performance:
Track Metrics: Measure the effectiveness of marketing campaigns using analytics tools.
13.2.8 Financial Management (merchantFinanceController.js)
View Earnings:
Access Revenue Data: Monitor daily, weekly, and monthly earnings from orders, reservations, and other services.
Manage Payouts:
Request Withdrawals: Initiate payout requests to transfer earnings to designated accounts.
Track Expenses:
Monitor Costs: Keep track of operational expenses and manage budgeting effectively.
Generate Financial Reports:
Export Reports: Create detailed financial reports for auditing and strategic planning.
13.2.9 Analytics & Reporting (merchantAnalyticsController.js)
Sales Analytics:
Monitor Sales Trends: Analyze sales data to identify best-selling products and peak sales periods.
Customer Insights:
Understand Behavior: Gain insights into customer preferences, ordering patterns, and feedback.
Operational Metrics:
Track Efficiency: Evaluate operational metrics such as order processing times, delivery efficiency, and reservation management.
Custom Reports:
Generate Specific Data: Create custom reports tailored to specific business needs or queries.
13.2.10 Content Management (merchantContentController.js)
Manage Listings:
Update Product Descriptions: Ensure all product or service listings are accurate and up-to-date.
Upload Media:
Add Images/Videos: Enhance listings with high-quality images and promotional videos.
Moderate User-Generated Content:
Manage Reviews: Respond to customer reviews, address feedback, and manage content visibility.
13.3 Staff: Guardians of Operations
13.3.1 Staff Report Management (staffReportController.js)
Generate Performance Report:
Summarize Tasks: Overview of tasks completed, hours worked, and tips earned.
Efficiency Insights: Allow Merchants to gauge staff efficiency; Admins can pull these reports when needed.
Export Staff Report PDF:
Create PDF Reports: Generate performance reviews over specified timeframes.
Official Records: Useful for maintaining official records or conducting staff appraisals.
Schedule Staff Reports:
Automate Reports: Set up periodic staff performance reports (weekly, monthly).
Admin Overrides: Admins can modify or review report schedules to ensure compliance.
View Staff Report:
Real-Time Metrics: Provide Staff with access to their own KPIs.
Progress Tracking: Allow Admins or Merchants to monitor staff progress.
13.3.2 Task Assignment and Management
Receive Assigned Tasks:
View Tasks: Access tasks assigned by Merchants or Admins, including details and deadlines.
Accept/Reject Tasks:
Acknowledge Assignments: Confirm acceptance or decline tasks based on availability and capacity.
Complete Tasks:
Mark as Done: Indicate task completion, triggering follow-up actions such as notifications or payments.
13.3.3 Profile Management
Update Personal Info:
Modify Details: Change personal or vehicle information as needed.
Change Password:
Secure Updates: Update account passwords securely to maintain account integrity.
Toggle Two-Factor Authentication:
Enhance Security: Enable or disable two-factor authentication for added account protection.
13.3.4 Availability Management
Set Availability Status:
Mark Status: Indicate availability for assignments or mark as offline based on work schedules.
Manage Shifts:
Coordinate Shifts: Adjust work shifts or schedules in coordination with Admins or Merchants.
13.4 Drivers: Knights of the Road
13.4.1 Driver Authentication (driverAuthController.js)
Register Driver:
Onboarding Process: Register new drivers and assign them to specific regions or branches.
Login Driver:
Authenticate Credentials: Verify driver login details and issue JWT tokens for secure sessions.
Verify Driver:
Background Checks: Optionally perform background checks or validate driver licenses.
Logout Driver:
End Session: Safely terminate the driver’s active session.
13.4.2 Driver Management (driverController.js)
Get Driver Details:
Personal & Vehicle Info: Access and view detailed information about the driver and their vehicle.
Update Driver Info:
Edit Contact/Vehicle Details: Allow drivers to update their personal contact information or vehicle details.
Set Availability:
Mark Status: Drivers can indicate whether they are available for assignments or offline.
List Assigned Tasks:
View Deliveries/Rides: Display all current deliveries or ride assignments to the driver.
13.4.3 Driver Profile Management (driverProfileController.js)
Update Profile:
Modify Information: Allow drivers to update their personal and vehicle information.
Get Profile:
Retrieve Profile Details: Drivers can view their own profile information.
Change Driver Password:
Secure Password Updates: Enable drivers to update their account passwords.
Toggle Driver 2FA:
Enhance Security: Drivers can enable or disable two-factor authentication for added security.
13.4.4 Fare Management (fareController.js)
Calculate Fare Estimate:
Estimate Costs: Provide approximate ride costs based on distance and time.
Finalize Fare:
Determine Final Fare: Calculate the final fare upon ride completion.
Get Fare Details:
Summarize Surcharges: Display details of additional charges like tolls or peak-hour fees.
Fetch Ride Types:
List Ride Tiers: Present available ride options (Standard, Premium) with respective base prices.
13.4.5 Taxi Ride Management (taxiRideController.js)
Request Ride:
Initiate Booking: Allow customers to request a taxi ride.
Assign Driver:
Driver Allocation: Use system logic to assign the best-suited driver or allow Admin overrides.
Update Ride Status:
Track Progress: Drivers can set ride statuses such as Accepted, En Route, Completed.
Complete Ride:
End Ride: Finalize the ride and trigger the fare payment process.
13.5 Customers: Heroes of the Realm
13.5.1 Customer Authentication (authController.js)
Signup:
Register Account: Allow customers to sign up using email or social logins.
Login:
Authenticate Credentials: Verify customer login details and issue JWT tokens.
Logout:
End Session: Safely terminate the customer’s active session.
Verify Email:
Confirm Ownership: Ensure the email address belongs to the customer.
13.5.2 Profile Management (profileController.js)
Update Profile:
Modify Personal Info: Change name, phone number, or address details.
Get Profile:
Retrieve Details: Access the logged-in customer’s profile information.
Change Password:
Secure Password Updates: Enable customers to update their account passwords.
Manage Payment Methods:
Add/Edit Payment Options: Allow customers to manage payment methods like mobile money or credit cards.
13.5.3 Shopping Cart Management (cartController.js)
Add Item to Cart:
Select Products/Menu Items: Add desired items to the shopping cart.
Remove Item from Cart:
Delete Unwanted Items: Remove specific items from the cart.
Update Cart Item:
Adjust Quantity/Customizations: Modify the quantity or customize items in the cart.
View Cart:
Review Contents: Display all items in the cart along with the total cost.
13.5.4 Order Management (orderController.js)
Checkout:
Finalize Purchase: Complete the purchase process for orders such as food or groceries.
Get Order Details:
View Specific Orders: Access detailed information about a particular order, its status, and items.
Update Order Status:
Merchant Updates: Allow Merchants to update order statuses (e.g., Preparing, Out for Delivery).
Get Past Orders:
Order History: View the history of past orders made by the customer.
13.5.5 Subscription Management (subscriptionController.js)
Create Subscription:
Set Up Recurring Services: Establish recurring deliveries or ride bookings.
Update Subscription:
Modify Schedule/Payment: Change the subscription schedule or payment details.
Cancel Subscription:
End Subscription Plan: Terminate an existing subscription.
Get Subscriptions:
List Active/Future Subscriptions: View all active or upcoming subscriptions.
13.5.6 Quick Link Management (quickLinkController.js)
Check-In:
Notify Arrival: Alert restaurant staff of the customer’s arrival.
Call Staff:
Request Assistance: Request staff assistance for extra utensils, refills, or other needs.
Request Bill:
Settle Payment: Signal readiness to pay the bill.
Leave Feedback:
Provide Immediate Feedback: Offer real-time feedback or special requests.
Request Additional Services (Initiative Feature):
Order Additional Items: Quickly add more items to the in-dining order without navigating the full menu.
Special Requests: Make specific requests such as dietary accommodations or table adjustments.
Emergency Help:
Immediate Assistance: Provide a quick access button for emergencies, allowing customers to discreetly request immediate assistance.
13.5.7 Table Booking Management (tableBookingController.js)
Reserve Table:
Book Date/Time: Reserve a table for dining at a specific date and time.
Approve/Deny Booking:
Merchant Decision: Allow Merchants to approve or deny reservation requests.
Check-In:
Indicate Arrival: Confirm the customer’s arrival at the restaurant.
Cancel Booking:
Terminate Reservation: Allow either the customer or Merchant to cancel the reservation before arrival.
13.5.8 In-Dining Order Management (inDiningOrderController.js)
Add In-Dining Item:
Add Dishes: Include additional dishes to the table’s order during dining.
Update In-Dining Order:
Adjust Quantities/Notes: Modify the quantity or add notes to in-dining orders.
Close In-Dining Order:
Finalize Bill: Complete the in-dining order and trigger the payment process.
View In-Dining Status:
Track Kitchen Progress: Monitor the preparation status and readiness time of orders.
Pay for In-Dining Orders (New Feature):
Secure In-App Payment: Allow customers to pay for their in-dining orders directly through the app, ensuring a seamless and contactless payment experience.
13.5.9 Review Management (reviewController.js)
Create Review:
Post Feedback: Allow customers to post reviews about orders, rides, or dining experiences.
Edit Review:
Revise Feedback: Enable customers to update existing reviews if permitted.
Delete Review:
Remove Feedback: Allow customers to delete reviews upon request.
Share Review to Social:
Publish on Social Platforms: Share approved reviews on social media.
13.6 Common: Features Used Across Multiple Roles
13.6.1 Alert Management (alertController.js)
Create Alert:
Generate System Alerts: Create alerts for events like downtime or anomalies.
Get Alerts:
List Active/Pending Alerts: View all current alerts needing attention.
Update Alert:
Change Alert Status: Update the status or resolution details of alerts.
Delete Alert:
Close Resolved Alerts: Remove alerts that have been addressed from the system.
13.6.2 Booking Status Management (bookingStatusController.js)
Update Booking Status:
Move Through Workflow: Progress bookings from Pending → Approved → Seated.
View Booking Status:
Retrieve Current Status: Check the current state of a booking.
Notify Booking Change:
Send Updates: Inform relevant parties about changes in booking status.
Cancel Booking:
Terminate Booking: Allow cancellation at any workflow stage, if permissible.
13.6.3 Navigation Management (navigationController.js)
Optimize Route:
Find Best Paths: Determine optimal routes based on current traffic conditions.
Get Route Details:
Distance/Time Estimates: Provide estimates for distance and travel time for assigned routes.
Update Driver Location:
Broadcast Location: Share the driver’s current location with the system.
Fetch Navigation Updates:
Refresh Route Data: Periodically update route information based on new data.
13.6.4 Notification Management (notificationController.js)
Send In-App Notification:
Real-Time Updates: Deliver instant notifications within the platform.
Send WhatsApp Notification:
External Messaging: Send notifications via WhatsApp if enabled by the user.
Batch Notifications:
Deliver Multiple Messages: Send multiple notifications together for efficiency.
Manage Notification Preferences:
Set Alert Preferences: Allow users to customize their notification settings.
13.6.5 Party Management (partyController.js)
Create Party:
Form Groups: Establish a group for shared dining or group ordering.
Add Member to Party:
Invite Users: Invite new members to join an existing party.
Remove Member from Party:
Manage Membership: Remove users from the party if necessary.
Split Bill:
Divide Expenses: Allocate expenses among party members.
13.6.6 Payment Management (paymentController.js)
Process Order Payment:
Handle Transactions: Manage in-app payments for orders.
Process Taxi Fare:
Collect Payments: Handle fare payments for rideshares.
Initiate Payout:
Distribute Earnings: Transfer earnings or tips to Staff and Drivers.
Get Payment History:
Track Payments: Access past payment records for auditing purposes.
13.6.7 Real-Time Communication (realTimeController.js)
Join Socket Room:
Authenticate Connection: Assign users to relevant channels upon socket connection.
Broadcast Event:
Send Live Updates: Deliver real-time updates like order status changes or new tasks.
Handle Disconnect:
Clean Up State: Manage user state when a socket connection drops.
Emit Systemwide Update:
Push Global Events: Admins or Merchants can broadcast events to all connected users.
13.6.8 Reporting Management (reportController.js)
Generate General Report:
Aggregate Data: Combine data across orders, tasks, and other activities.
Fetch Report Data:
Retrieve Raw Stats: Access unprocessed data for detailed analysis.
Export Report to PDF:
Create Offline Reports: Generate PDF versions of reports for offline use.
Schedule Periodic Reports:
Automate Summaries: Set up daily, weekly, or monthly summary reports.
13.6.9 Sales Reporting (salesReportController.js)
Generate Sales Report:
Revenue Analytics: Focus on daily and weekly sales performance.
Get Top Selling Items:
Identify Demand: Highlight the most in-demand products or services.
Export Sales PDF:
Official Records: Produce PDF reports for official documentation.
Schedule Sales Reporting:
Automate Revenue Snapshots: Set recurring schedules for sales reports.
13.6.10 Social Media Management (socialMediaController.js)
Share Review Post:
Publish Reviews: Share approved customer reviews on social media platforms.
OAuth Login:
Integrate Social Logins: Allow users to log in using social media accounts.
Disconnect Social Account:
Unlink Accounts: Remove connected social media accounts from the platform.
Fetch Social Share Settings:
Retrieve Preferences: Get user preferences for auto-sharing content on social media.
13.6.11 Task Assignment Management (taskAssignmentController.js)
Create Task:
Define Jobs: Set up new tasks such as deliveries, table service, or special errands.
Assign Task:
Allocate Users/Drivers: Assign tasks to the most suitable users or drivers.
Get Assigned Tasks:
List User Tasks: Display all tasks assigned to a logged-in user.
Reassign Task:
Transfer Tasks: Move tasks to another user if the current assignee is unavailable.
13.6.12 Task Management (taskController.js)
Accept Task:
Acknowledge Assignment: Allow users to mark tasks as accepted.
Reject Task:
Decline Assignment: Enable users to decline tasks, triggering system reassignment.
Complete Task:
Mark as Done: Indicate task completion, triggering follow-up actions like notifications or payments.
Get Task Status:
View Progression: Check the current status of a task (Pending, In Progress, Completed).
13.6.13 Tip Management (tipController.js)
Record Tip:
Associate with Orders/Rides: Link tips to specific orders or rides.
Allocate Tip:
Distribute Earnings: Allocate tips based on Merchant policies (direct or pooled).
Fetch Tips for User:
View Earnings: Show total tips earned by Staff or Drivers.
Report Tips:
Summarize Tip Data: Provide summaries for payroll or performance reviews.
14. Enhanced Features: Table Service Ordering and Quick Links
14.1 Customer: Enhanced Table Service Ordering
In-Dining Order Management Enhancements (inDiningOrderController.js):
Place Orders from Table: Customers can browse the menu and place orders directly from their booked table using the app.
Real-Time Order Tracking: Monitor the status of in-dining orders (e.g., Order Received, Preparing, Ready, Served).
In-App Payment for In-Dining Orders: Securely pay for in-dining orders through the app, ensuring a seamless and contactless payment experience.
Special Requests: Include options for dietary preferences, additional notes, or specific requests when placing orders.
14.2 Customer: Enhanced Quick Links
Quick Link Features (quickLinkController.js):
Call Waiter: Instantly notify staff to attend to the customer’s needs.
Request Assistance: Request specific services such as refills, extra utensils, or table adjustments.
Order Additional Items: Quickly add more items to the in-dining order without navigating the full menu.
Emergency Help: Provide a quick access button for emergencies, allowing customers to discreetly request immediate assistance.
Feedback Submission: Allow customers to provide immediate feedback or rate their dining experience in real-time.
14.3 Merchant & Staff: Managing Table Service Orders
Merchant Order Management (merchantOrderController.js):
Receive In-Dining Orders: View and manage orders placed by customers at their tables.
Update Order Status: Change order statuses (e.g., Received, Preparing, Ready, Served).
Handle In-App Payments: Manage and verify payments processed through the app for in-dining orders.
Staff Task Management (merchantStaffController.js & taskController.js):
Respond to Quick Links: Staff can quickly respond to customer requests made via quick links.
Manage In-Dining Orders: Handle tasks related to preparing and serving in-dining orders efficiently.
Update Task Status: Mark tasks as accepted, in progress, or completed based on customer interactions and order requirements.
14.4 Admin: Overseeing Enhanced Table Service
System Configuration for Table Service (adminTableServiceController.js) (Initiative Feature):
Enable/Disable Table Service Features: Admins can toggle table service ordering and payment functionalities across the platform.
Manage Quick Link Options: Define and customize the quick link options available to customers based on restaurant categories or regions.
Monitor Table Service Performance: Track metrics related to in-dining orders, quick link usage, and customer satisfaction.
Handle In-App Payment Issues: Resolve any payment disputes or technical issues related to in-dining transactions.